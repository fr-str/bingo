// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: bingo.sql

package store

import (
	"context"
	"database/sql"

	"github.com/fr-str/bingo/pkg/db/types"
)

const getEntries = `-- name: GetEntries :many
SELECT id, field, is_set, session, created_at, updated_at FROM bingo_history WHERE session = ?1 AND is_set IS NOT NULL
`

func (q *Queries) GetEntries(ctx context.Context, session string) ([]BingoHistory, error) {
	rows, err := q.db.QueryContext(ctx, getEntries, session)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BingoHistory
	for rows.Next() {
		var i BingoHistory
		if err := rows.Scan(
			&i.ID,
			&i.Field,
			&i.IsSet,
			&i.Session,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEntry = `-- name: GetEntry :one
SELECT id, field, is_set, session, created_at, updated_at FROM bingo_history WHERE id = ?1 AND session = ?2
`

type GetEntryParams struct {
	ID      string
	Session string
}

func (q *Queries) GetEntry(ctx context.Context, arg GetEntryParams) (BingoHistory, error) {
	row := q.db.QueryRowContext(ctx, getEntry, arg.ID, arg.Session)
	var i BingoHistory
	err := row.Scan(
		&i.ID,
		&i.Field,
		&i.IsSet,
		&i.Session,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const saveBingoEntry = `-- name: SaveBingoEntry :exec
INSERT INTO bingo_history (id, field,session, is_set, created_at, updated_at)
VALUES (?1, ?2,?3, ?4, ?5, ?6)
ON CONFLICT (id) DO UPDATE SET
    is_set = excluded.is_set,
    updated_at = excluded.updated_at
`

type SaveBingoEntryParams struct {
	ID        string
	Field     string
	Session   string
	IsSet     sql.NullInt64
	CreatedAt types.RFC3339
	UpdatedAt types.RFC3339
}

func (q *Queries) SaveBingoEntry(ctx context.Context, arg SaveBingoEntryParams) error {
	_, err := q.db.ExecContext(ctx, saveBingoEntry,
		arg.ID,
		arg.Field,
		arg.Session,
		arg.IsSet,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}
