// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: bingo.sql

package store

import (
	"context"
	"database/sql"

	"github.com/fr-str/bingo/pkg/db/types"
)

const bingoStats = `-- name: BingoStats :many
SELECT
    field,
    count(*) as count,
    date(created_at) as date
FROM bingo_history
WHERE is_set IS NOT NULL
GROUP BY field, date(created_at)
ORDER BY date(created_at) DESC
`

type BingoStatsRow struct {
	Field string
	Count int64
	Date  interface{}
}

// aggregates by field and date
func (q *Queries) BingoStats(ctx context.Context) ([]BingoStatsRow, error) {
	rows, err := q.db.QueryContext(ctx, bingoStats)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BingoStatsRow
	for rows.Next() {
		var i BingoStatsRow
		if err := rows.Scan(&i.Field, &i.Count, &i.Date); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEntries = `-- name: GetEntries :many
WITH DailyFieldCounts AS (
    SELECT 
        field,
        COUNT(*) as daily_field_count
    FROM bingo_history WHERE bingo_history.day = ?2 AND is_set IS NOT NULL
    GROUP BY field
) SELECT 
    bh_session.field, bh_session.session, bh_session.day, bh_session.is_set, bh_session.created_at, bh_session.updated_at,
    dfc.daily_field_count 
FROM bingo_history bh_session
JOIN DailyFieldCounts dfc ON bh_session.field = dfc.field
WHERE 
    bh_session.session = ?1
AND
    bh_session.is_set IS NOT NULL
`

type GetEntriesParams struct {
	Session string
	Day     int64
}

type GetEntriesRow struct {
	Field           string
	Session         string
	Day             int64
	IsSet           sql.NullInt64
	CreatedAt       types.RFC3339
	UpdatedAt       types.RFC3339
	DailyFieldCount int64
}

func (q *Queries) GetEntries(ctx context.Context, arg GetEntriesParams) ([]GetEntriesRow, error) {
	rows, err := q.db.QueryContext(ctx, getEntries, arg.Session, arg.Day)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEntriesRow
	for rows.Next() {
		var i GetEntriesRow
		if err := rows.Scan(
			&i.Field,
			&i.Session,
			&i.Day,
			&i.IsSet,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DailyFieldCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEntry = `-- name: GetEntry :one
SELECT field, session, day, is_set, created_at, updated_at FROM bingo_history WHERE field = ?1 AND session = ?2 AND day = ?3 LIMIT 1
`

type GetEntryParams struct {
	Field   string
	Session string
	Day     int64
}

func (q *Queries) GetEntry(ctx context.Context, arg GetEntryParams) (BingoHistory, error) {
	row := q.db.QueryRowContext(ctx, getEntry, arg.Field, arg.Session, arg.Day)
	var i BingoHistory
	err := row.Scan(
		&i.Field,
		&i.Session,
		&i.Day,
		&i.IsSet,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const saveBingoEntry = `-- name: SaveBingoEntry :exec
INSERT INTO bingo_history (field,session,day, is_set, created_at, updated_at)
VALUES (?1,?2,?3, ?4, ?5, ?6)
ON CONFLICT (session,day,field) DO UPDATE SET
    is_set = excluded.is_set,
    updated_at = excluded.updated_at
`

type SaveBingoEntryParams struct {
	Field     string
	Session   string
	Day       int64
	IsSet     sql.NullInt64
	CreatedAt types.RFC3339
	UpdatedAt types.RFC3339
}

func (q *Queries) SaveBingoEntry(ctx context.Context, arg SaveBingoEntryParams) error {
	_, err := q.db.ExecContext(ctx, saveBingoEntry,
		arg.Field,
		arg.Session,
		arg.Day,
		arg.IsSet,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}
